include gro

//Configuracion del ambiente
set ("dt", 0.1);
set ("population_max", 2000000);
growth_rate:= 0.0001;

//Configuracion de Se単ales
set ("signals", 1.0);
set ("signals_draw", 1.0);
grid("continuous", "gro_original", 10, 10, 8);

f1 := s_signal([kdiff := 0.2, kdeg := 0.1]);
tf := s_signal([kdiff := 0.5, kdeg := 0.5]);
m1 := s_signal([kdiff := 0.5, kdeg := 0.2]);
f1hi := s_signal([kdiff := 0.5, kdeg := 0.3]);
f1lo := s_signal([kdiff := 0.5, kdeg := 0.3]);
route1 := "/Users/matia/Downloads/";

fp := fopen (route1 <> "yesGate2.csv", "w" );

t := 0;


//Estados Posibles
genes([		name := "base",
			proteins := {"GM1", "Gbase"},
			promoter := [function := "AND",
			transcription_factors := {"tf", "Gprod"},
			noise := [toOff := 0, toOn := 0, noise_time:= 0]],
			prot_act_times := [times := {0,0}, variabilities := {0,0}],
			prot_deg_times := [times := {2,0}, variabilities := {0.0,0}]]);


//Gen de feedback
genes([		name := "feedback",
			proteins := {"GF1"},
			promoter := [function := "YES",
			transcription_factors := {"m1"},
			noise := [toOff := 0, toOn := 0, noise_time:= 0]],
			prot_act_times := [times := {0}, variabilities := {0}],
			prot_deg_times := [times := {1.0}, variabilities := {0.0}]]);


//Gen de relleno para poder utilizar las variables f1h1 y f1lo
genes([		name := "hiDetector",
			proteins := {"Gf1hi"},
			promoter := [function := "YES",
			transcription_factors := {"f1hi"},
			noise := [toOff := 0, toOn := 0, noise_time:= 0]],
			prot_act_times := [times := {0}, variabilities := {0}],
			prot_deg_times := [times := {0.0}, variabilities := {0.0}]]);

//Gen de relleno para poder utilizar las variables f1h1 y f1lo
genes([		name := "loDetector",
			proteins := {"Gf1lo"},
			promoter := [function := "YES",
			transcription_factors := {"f1lo"},
			noise := [toOff := 0, toOn := 100, noise_time:= 0]],
			prot_act_times := [times := {0}, variabilities := {0}],
			prot_deg_times := [times := {0.0}, variabilities := {0.0}]]);



//Plasmido que contendra los genes

//Se carga cada gen por separado
plasmids_genes ([p1 := {"base"}, p6:={"feedback", "hiDetector", "loDetector"}]);


//GBASE ti単e verde
action({"Gbase"},"d_paint",{"1","0","0","0"}); //Coloracion verde
action({"-Gbase"},"d_paint",{"-1","0","0","0"});

//GM1 libera m1
action({"GM1"},"s_emit_signal",{tostring(m1),"10","exact"});

//GF1 libera f1
action({"GF1"},"s_emit_signal",{tostring(f1),"100","exact"});

action({},"conjugate_directed",{"p1","100"});

//Detectar tf
action({},"s_get_QS",{tostring(tf),">","0.5","tf"});//Quorum sensing para tf

//Detectar m1
action({},"s_get_QS",{tostring(m1),">","2","m1"});//Quorum sensing para tf

//Detectar f1 alto
action({},"s_get_QS",{tostring(f1),">","4000","f1hi"});//Quorum sensing para f1


//Detectar f1 bajo
action({},"s_get_QS",{tostring(f1),"<","3500","f1lo"});//Quorum sensing para f1


program p() :=
{
  
	skip();
};



program report():=
{
	selected : {  
    //clear_messages(0),
    clear_messages(1),
	message(1 ,
	 	"Cell: " <> tostring(id)
	 <> ", tf: " <> tostring(s_get_signal(tf))
     <> ", m1: " <> tostring(s_get_signal(m1))
	 <> ", f1: " <> tostring(s_get_signal(f1))
     <> ", t: " <> tostring(dump_single(fp))

     <> ", t: " <> tostring(t)




	 ),
     //if s_get_signal(f1) > 10 then message(0 , "f1 mayor a 10: si") else message(0 ,"f1 mayor a 10: no") end
     }
};


program main() :=
{    true:
	  {		

		t := t + dt;
		s_set_signal(tf, 100000, 0, 0);//se単al de tf en el centro para activar GM1 y GM1m
      }


    s_set_signal(tf, 100000, 0, 0);//se単al de tf en el centro para activar GM1 y GM1m
	c_ecolis(100, 0, 0, 100, {"p1", "p4", "p5"}, program p() + report()); //se cargan todos los plasmidos menos el de feedback en las celulas de memoria
	action({"Gbase"},"set_eex",{"p4"});




};
