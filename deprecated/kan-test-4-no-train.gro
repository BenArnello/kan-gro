include gro

//Configuracion del ambiente
set ("dt", 0.1);
set ("population_max", 7000);


//Configuracion de Señales
set ("signals", 1.0);
set ("signals_draw", 1.0);
grid("continuous", "gro_original", 10, 10, 8);

tf_signal := s_signal([kdiff := 0.5, kdeg := 0.05]);
m1 := s_signal([kdiff := 0.5, kdeg := 0.05]);


route1 := "/Users/matia/Downloads/";

fp := fopen (route1 <> "dumpSingleV3.csv", "w" );
ft := fopen (route1 <> "dumpMultipleV3.csv", "w");
fc := fopen (route1 <> "cellV3.csv", "w");


t := 0;



//Estados Posibles
genes([		name := "base_state",
			proteins := {"gene_m1_medium", "gene_base"},
			promoter := [function := "AND",
			transcription_factors := {"gene_tf", "gene_productor"},
			noise := [toOff := 0, toOn := 0, noise_time:= 0]],
			prot_act_times := [times := {1,2}, variabilities := {0,0}],
			prot_deg_times := [times := {2,2}, variabilities := {0.0,0}]]);

genes([		name := "high_state",
			proteins := {"gene_m1_medium", "gene_m1_low", "gene_high"},
			promoter := [function := "AND",
			transcription_factors := {"gene_tf", "gene_productor"},
			noise := [toOff := 0, toOn := 0, noise_time:= 0]],
			prot_act_times := [times := {1,1,1}, variabilities := {0,0,0}],
			prot_deg_times := [times := {2, 2,1}, variabilities := {0.0, 0.0,0}]]);


genes([		name := "low_state",
			proteins := {"gene_m1_low", "gene_low"},
			promoter := [function := "AND",
			transcription_factors := {"gene_tf", "gene_productor"},
			noise := [toOff := 0, toOn := 0, noise_time:= 0]],
			prot_act_times := [times := {2,1}, variabilities := {0,0}],
			prot_deg_times := [times := {2, 1}, variabilities := {0.0, 0.0}]]);

genes([		name := "off_state",
			proteins := {"gene_off"},
			promoter := [function := "AND",
			transcription_factors := {"gene_tf", "gene_productor"},
			noise := [toOff := 0, toOn := 0, noise_time:= 0]],
			prot_act_times := [times := {2,1}, variabilities := {0,0}],
			prot_deg_times := [times := {2, 1}, variabilities := {0.0, 0.0}]]);



//Gen que indica que una celula es productora

genes([		name := "productor",
			proteins := {"gene_productor"},
			promoter := [function := "NOT",
			transcription_factors := {"gene_memory"},
			noise := [toOff := 0, toOn := 0, noise_time:= 0]],
			prot_act_times := [times := {0,0}, variabilities := {0,0}],
			prot_deg_times := [times := {0,0}, variabilities := {0.0,0}]]);


//Gen para evitar que las celulas de memoria activen sus funciones
genes([		name := "deactivator",
			proteins := {"gene_memory"},
			promoter := [function := "TRUE",
			noise := [toOff := 0, toOn := 0, noise_time:= 0]],
			prot_act_times := [times := {0,0}, variabilities := {0,0}],
			prot_deg_times := [times := {0,0}, variabilities := {0,0}]]);



//Genes de relleno para poder utilizar las variables f1h1 y lo
genes([		name := "hi_detector",
			proteins := {"gene_hi"},
			promoter := [function := "YES",
			transcription_factors := {"h1"},
			noise := [toOff := 0, toOn := 0, noise_time:= 0]],
			prot_act_times := [times := {1}, variabilities := {0}],
			prot_deg_times := [times := {0.1}, variabilities := {0.0}]]);

genes([		name := "lo_detector",
			proteins := {"gene_lo"},
			promoter := [function := "YES",
			transcription_factors := {"lo"},
			noise := [toOff := 0, toOn := 100, noise_time:= 0]],
			prot_act_times := [times := {1}, variabilities := {0}],
			prot_deg_times := [times := {0.1}, variabilities := {0.0}]]);

//Promotor constitutivo (Productor de TF)
genes([		name := "constitutive_tf_productor",
			proteins := {"gene_tf"},
			promoter := [function := "TRUE",
			noise := [toOff := 0, toOn := 0, noise_time:= 0]],
			prot_act_times := [times := {0}, variabilities := {0}],
			prot_deg_times := [times := {0.0}, variabilities := {0.0}]]);





//Plasmido que contendra los genes

//Se carga cada gen por separado
plasmids_genes ([p1 := {"base_state"}, p2:={"high_state"}, p3:={"low_state"}, p4:={"deactivator"}, p5:={"productor"}, p6:={ "hi_detector", "lo_detector"}, p7:={"constitutive_tf_productor"}, p8:={"off_state"}]);

//--------------Coloracion-------------------------
//gene_base tiñe verde
action({"gene_base"},"d_paint",{"1","0","0","0"}); //Coloracion verde
action({"-gene_base"},"d_paint",{"-1","0","0","0"});

//gene_base tiñe rojo
action({"gene_high"},"d_paint",{"0","1","0","0"}); //Coloracion verde
action({"-gene_high"},"d_paint",{"0","-1","0","0"});

//Gdeac tiñe azul
action({"gene_memory"},"d_paint",{"0","0","0","1"}); //Coloracion cyan
action({"-gene_memory"},"d_paint",{"0","0","0","-1"});
//--------------Coloracion-------------------------


//--------------Señales-------------------------
//gene_m1_medium libera m1
action({"gene_m1_medium"},"s_emit_signal",{tostring(m1),"5","area"});

//gene_m1_low libera menos m1
action({"gene_m1_low"},"s_emit_signal",{tostring(m1),"3","area"});



//Detectar tf_signal
//action({},"s_get_QS",{tostring(tf_signal),">","0.5","gene_tf"});//Quorum sensing para tf

//Detectar m1
//action({},"s_get_QS",{tostring(m1),">","2","m1"});//Quorum sensing para tf

//Detectar f1 alto
action({},"s_get_QS",{tostring(m1),">","100","h1"});//Quorum sensing para f1


//Detectar f1 bajo
action({},"s_get_QS",{tostring(m1),"<","70","lo"});//Quorum sensing para f1



//Pasar de base_state a high_state
action({"gene_lo","gene_base","gene_productor"},"set_eex",{"p1"}); //Se bloquea la conjugacion de p1
action({"gene_lo","gene_base","gene_productor"},"remove_eex",{"p2"}); //Se permite la conjugacion de p2
action({"gene_lo","gene_base","gene_productor"},"lose_plasmid",{"p1"}); //Se remueve el plasmido p1

//pasar de high_state a base_state
action({"gene_hi","gene_high","gene_productor"},"set_eex",{"p2"}); //Se repite lo mismo en cada paso, se bloquea el plasmido a elminar y se permite el traspaso del estado siguiente
action({"gene_hi","gene_high","gene_productor"},"remove_eex",{"p1"});
action({"gene_hi","gene_high","gene_productor"},"lose_plasmid",{"p2"});

//pasar de base_state a low_state
action({"gene_hi","gene_base","gene_productor"},"set_eex",{"p1"});
action({"gene_hi","gene_base","gene_productor"},"remove_eex",{"p3"});
action({"gene_hi","gene_base","gene_productor"},"lose_plasmid",{"p1"});

//pasar de low_state a base_state
action({"gene_lo","gene_low","gene_productor"},"set_eex",{"p3"});
action({"gene_lo","gene_low","gene_productor"},"remove_eex",{"p1"});
action({"gene_lo","gene_low","gene_productor"},"lose_plasmid",{"p3"});

//pasar de low_state a off_state
action({"gene_hi","gene_low","gene_productor"},"set_eex",{"p3"});
action({"gene_hi","gene_low","gene_productor"},"remove_eex",{"p8"});
action({"gene_hi","gene_low","gene_productor"},"lose_plasmid",{"p3"});

//pasar de off_state a low_state
action({"gene_lo","gene_off","gene_productor"},"set_eex",{"p8"});
action({"gene_lo","gene_off","gene_productor"},"remove_eex",{"p3"});
action({"gene_lo","gene_off","gene_productor"},"lose_plasmid",{"p8"});





action({},"conjugate_directed",{"p1","10000000"});
action({},"conjugate_directed",{"p2","10000000"});
action({},"conjugate_directed",{"p3","10000000"});
action({},"conjugate_directed",{"p8","10000000"});






program p() :=
{
  
	skip();
};



program report():=

{

	true: {  
    //clear_messages(0),
    clear_messages(1),
	 dump_single(fc),

	message(1 ,
	 	"Cell: " <> tostring(id)
	 //<> ", tf: " <> tostring(s_get_signal(tf))
     <> ", m1: " <> tostring(s_get_signal(m1))
	 //<> ", f1: " <> tostring(s_get_signal(f1))
     //<> ", t: " <> tostring(dump_single(fp))


   


    <> ", t: " <> tostring(t)

	),




	fprint ( fp, "t, m1\n");

	fprint ( fp, t,",",tostring(s_get_signal(m1)));

	
	 
     //if s_get_signal(f1) > 10 then message(0 , "f1 mayor a 10: si") else message(0 ,"f1 mayor a 10: no") end
     }
};


program main() :=
{    true:

	  {		

		t := t + dt;
	    dump_multiple(ft,{"gene_productor"},{"gene_memory"});

		
      }

		



	action({},"set_growth_rate",{"0.015"});
	c_ecolis(100, 0, 0, 100, {"p1", "p2", "p3", "p4", "p8"}, program p() ); //se cargan todos los plasmidos menos el de feedback en las celulas de memoria
    c_ecolis(300, 0, 0, 100, {"p1", "p5", "p6", "p7"}, program p() + report()); //Se inicia la colonia solo con p1 y p5 (base_state y feedback)
	action({"gene_base"},"set_eex",{"p4"});



};
